% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/over2.R
\name{over2}
\alias{over2}
\title{Loop two inputs simultaneaously over one or several functions in 'dplyr'}
\usage{
over2(.x, .y, .fns, ..., .names = NULL)
}
\arguments{
\item{.x, .y}{An atomic vector (expect 'raw' and 'complex') to apply functions to.
Instead of a vector a <\code{\link[=selection_helpers]{selection helper}}> or anything else
that is coercible to an atomic vector can be used. Note that \code{over()} must only
be used to create 'new' columns and will throw an error if \code{.x} contains
existing column names. To transform existing columns use \code{\link[dplyr:across]{dplyr::across()}}.}

\item{.fns}{Functions to apply to each of the elements in \code{.x}. For
functions that expect variable names as input, the selected strings need to
be turned into symbols and evaluated. \code{dplyrover} comes with a genuine helper
function that evaluates strings as names \code{\link[=.]{.()}}. Note that <\code{\link[rlang:nse-force]{rlang's forcing operators}}>
are not supported in \code{over()}.

Possible values are:
\itemize{
\item A function
\item A purrr-style lambda
\item A list of functions/lambdas
}

For examples see the example section below.

Note that, unlike \code{across()}, \code{over()} does not accept \code{NULL} as a
value to \code{.fns}.}

\item{...}{Additional arguments for the function calls in \code{.fns}.}

\item{.names}{A glue specification that describes how to name the output
columns. This can use \code{{vec}} to stand for the selected vector element, and
\code{{fn}} to stand for the name of the function being applied. The default
(\code{NULL}) is equivalent to \code{"{vec}"} for the single function case and
\code{"{vec}_{fn}"} for the case where a list is used for \code{.fns}.}
}
\value{
A tibble with one column for each element in \code{.x} and each function in \code{.fns};.
}
\description{
...
}
\section{Examples}{


\code{over()} can only be used inside \code{dplyr::mutate} or \code{dplyr::summarise}.
It has two main use cases. They differ in how the elements in \code{.x}
are used. Let's first attach \code{dplyr}:\if{html}{\out{<div class="r">}}\preformatted{library(dplyr)

# For better printing
iris <- as_tibble(iris)
}\if{html}{\out{</div>}}
}

