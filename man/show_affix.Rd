% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/show_affix.R
\name{show_affix}
\alias{show_affix}
\alias{show_prefix}
\alias{show_suffix}
\title{Show affixes for variable pairs of two sets of columns}
\usage{
show_prefix(.data = NULL, .xcols = NULL, .ycols = NULL)

show_suffix(.data = NULL, .xcols = NULL, .ycols = NULL)
}
\arguments{
\item{.data}{A data frame.}

\item{.xcols, .ycols}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> Sets of
columns for which the common pre- or suffix will be shown for each pair.
Note that you can not select.}
}
\value{
A tibble with three columns: .xcols, .ycols and prefix or suffix.
}
\description{
These functions show the prefixes or suffixes for each pair of variables of
two sets of columns. They are intended to be used either (1) in case \code{across2}
throws an error when \code{{pre}} or \code{{suf}} are specified in \code{across2}'s \code{.names}
argument or (2) before using \code{{pre}} or \code{{suf}} in \code{across2} to understand
how the pre- or suffixes will look like.
\itemize{
\item \code{\link[=show_prefix]{show_prefix()}} lists each variable pair and the corresponding alphanumeric prefix
\item \code{\link[=show_suffix]{show_suffix()}} lists each variable pair and the corresponding alphanumeric suffix
}
}
\section{Examples}{


Below two use cases of \code{show_prefix/suffix} are briefly explained.
Let's first attach dplyr and get ready:\if{html}{\out{<div class="r">}}\preformatted{library(dplyr)

# For better printing
iris <- as_tibble(iris)
}\if{html}{\out{</div>}}
\subsection{(1) When called after an error is thrown by across2()}{

Let's assume we use \code{across2} with the \code{{pre}} glue specification on some
data where not all variable pairs share a common prefix. In the example below
we use \code{dplyr::rename} to create such a case. Then \code{across2} will throw an
error. The error message already suggests that we can run \code{show_prefix()}
to see what went wrong. In this case we can call \code{show_prefix()} without
any arguments:\if{html}{\out{<div class="r">}}\preformatted{ iris \%>\%
   as_tibble \%>\%
   rename("Pesal.Length" = Sepal.Length) \%>\%
   mutate(across2(ends_with("Length"),
                  ends_with("Width"),
                  .fns = list(product = ~ .x * .y,
                              sum = ~ .x + .y),
                  .names = "\{pre\}_\{fn\}"))
#> Error: Problem with `mutate()` input `..1`.
#> x Problem with `across2()` input `.names`.
#> i When `\{pre\}` is used inside `.names` each pair of input variables in `.xcols` and `.ycols` must share a common prefix of length > 0.
#> x For at least one pair of variables a shared prefix could not be extracted.
#> i Run `show_prefix()` to see the prefixes for each variable pair.
#> i Input `..1` is `across2(...)`.
show_prefix()
#> # A tibble: 2 x 3
#>   .xcols       .ycols      prefix
#>   <chr>        <chr>       <chr> 
#> 1 Pesal.Length Sepal.Width <NA>  
#> 2 Petal.Length Petal.Width Petal
}\if{html}{\out{</div>}}
}

\subsection{(2) When called on a data.frame}{

When called on a data.frame we just need to specify two sets of columns:
\code{.xcols} and \code{.ycols} (just like in \code{across2}).\if{html}{\out{<div class="r">}}\preformatted{ iris \%>\%
   show_suffix(starts_with("Sepal"),
               starts_with("Petal"))
#> # A tibble: 2 x 3
#>   .xcols       .ycols       suffix
#>   <chr>        <chr>        <chr> 
#> 1 Sepal.Length Petal.Length Length
#> 2 Sepal.Width  Petal.Width  Width
}\if{html}{\out{</div>}}
}
}

